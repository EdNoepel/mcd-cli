#!/usr/bin/env bash
### McDai - Multi-collateral Dai
shopt -s extglob

OPTS="mcd [<options>] <command> [<args>]
mcd [<command>] --help
--
  Connection options:
C,chain=chain         chain config - mainnet, kovan, testnet or a remote testnet id

  Transaction Options:
F,from=address        account to send from
G,gas=number          number of gas units to provide
async                 don't wait for tx receipts

  MCD options:
I,ilk=string          ilk identifier
U,urn=string          urn identifier

  Filter options:
B,block=number        from block
  Other Options:

J,config=file         custom deployment address file (json)
"

set -e

if ! [[ $SETH_INIT ]]; then
  export SETH_INIT=1
  [[ -e ~/.sethrc ]] && . ~/.sethrc
fi

if [[ $2 = --help ]]; then
  exec "${0##*/}" help -- "$1"
elif [[ $1 == testnet ]]; then
  exec "${0##*/}-testnet" $2
elif [[ $1 = -* ]] && command -v "${0##*/}-$1" &>/dev/null; then
  exec "${0##*/}-$1" "${@:2}"
fi

eval "$(git rev-parse --parseopt -- "$@" <<<"$OPTS" || echo exit $?)"

while [[ $1 ]]; do
  case $1 in
    --)             shift; break;;

    -C|--chain)     shift; export MCD_CHAIN=$1;;
    -J|--config)    shift; export MCD_CONFIG=$1;;

    -I|--ilk)       shift; export MCD_ILK=$1;;
    -U|--urn)       shift; export MCD_URN=$1;;

    -B|--block)     shift; export ETH_BLOCK=$1;;

    -F|--from)      shift; export ETH_FROM=$1;;
    -G|--gas)       shift; export ETH_GAS=$1;;

       --async)     export SETH_ASYNC=yes;;

    *) printf "${0##*/}: unrecognised option: %q\n" "--$1"; exit 1
  esac; shift
done

TESTNET=${TESTNET:-~/.dapp/testnet}

testnet-config() {
  dir=$TESTNET/tmp/$1
  conf=$dir/conf.json;

  if [[ ! -d "$dir" ]]; then
    json=$(mcd testnet chain ${1} | jq '.')
    if [[ "$json" == "null" ]]; then
      echo "Error: chain config not found for $1"
      exit 1
    else
      mkdir -p $dir; echo $json > $conf
      pk=$(cat $conf | jq -r .chain_details.accounts[0].priv_key)
      geth --datadir=$dir --password=${0%/*}/conf/empty.pw \
           account import <(echo $pk) &>/dev/null
    fi
  fi
  load-addresses $conf;
}

load-addresses() {
  path=${MCD_CONFIG:-$1}
  if [[ ! -e "$path" ]]; then
    echo "Config file not found: $path not found"
    exit 1
  fi
  exports=$(cat $path | jq -r ".deploy_data // . | \
    to_entries|map(\"\(.key)=\(.value|tostring)\")|.[]")
  for e in $exports; do export "$e"; done
}

case "$MCD_CHAIN" in
  mainnet)
    load-addresses ${0%/*}/conf/mainnet.json;
    export SETH_CHAIN=mainnet
    ;;
  kovan)
    load-addresses ${0%/*}/conf/kovan.json;
    export SETH_CHAIN=kovan
    ;;
  testnet) # local dapp testnet
    load-addresses "${MCD_CONFIG:-$TESTNET/8545/config/addresses.json}"
    export ETH_RPC_URL=http://127.0.0.1:8545
    export ETH_LOGS_API=rpc
    export ETH_KEYSTORE=$TESTNET/8545/keystore
    export ETH_PASSWORD=${0%/*}/conf/empty.pw
    export ETH_FROM=$(seth accounts ls | sed 1q | awk '{print substr ($0, 0, 42)}')
    ;;
  +([0-9])) # remote testnet id
    testnet-config "$MCD_CHAIN"
    export ETH_RPC_URL=$(cat $path | jq -r .chain_details.rpc_url)
    export ETH_LOGS_API=rpc
    export ETH_KEYSTORE=$TESTNET/tmp/$MCD_CHAIN/keystore
    export ETH_PASSWORD=${0%/*}/conf/empty.pw
    export ETH_FROM=$(cat $path | jq -r .chain_details.coinbase)
    ;;
  *)
    echo >&2 "${0##*/}: warning: \`MCD_CHAIN' not set; using default (kovan)"
    export MCD_CHAIN=kovan
    ;;
esac

"${0##*/}-${1-help}" "${@:2}"
