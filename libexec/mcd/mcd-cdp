#!/usr/bin/env bash
### mcd-cdp -- CDP managerment
### Usage: mcd [--cdp=<id>] cdp [<id>] [<command>]
###
### Commands: cdp ls                      List Cdps
###           cdp count                   Cdp count
###           cdp --ilk=<id> open         Open a new Cdp
###           cdp <id> owner              Get Cdp owner
###           cdp <id> give <address>     Change Cdp owner
###           cdp <id> frob <dink> <dart> Cdp frob
###           cdp <id> gem join <wad>     Add collateral
###           cdp <id> gem exit <wad>     Remove collateral
###           cdp <id> dai join <wad>     Add Dai
###           cdp <id> dai exit <wad>     Remove Dai
###
### With `--proxy', transact via registered proxy.
set -e
shopt -s extglob

if [[ $MCD_PROXY = yes ]]; then
  MCD_PROXY=$(mcd --proxy-address)
fi
export CDP_GUY=${MCD_PROXY:-$ETH_FROM}

require-cdp() {
  [ -n "$MCD_CDP" ] ||
    mcd --fail "$1: MCD_CDP not set; Please specify a Cdp id (--cdp=<id>)"
}

case $1 in
  count) {
    sig="count(address)"
    hex=$(seth call ${CDP_MANAGER?} $sig ${CDP_GUY?})
    seth --to-dec $hex
  };;
  owner) {
    CDP=$(mcd --require-cdp $0)
    sig="lads(uint256)(address)"
    echo 0x$(seth call ${CDP_MANAGER?} $sig $CDP)
  };;
  urn) {
     mcd --require-cdp $0 &>/dev/null
     echo $MCD_URN
  };;
  ilk) {
     mcd --require-cdp $0 &>/dev/null
     echo $MCD_ILK
  };;
  ls) {
    sig="getCdps(address,address)"
    data=$(seth call ${GET_CDPS?} $sig ${CDP_MANAGER?} $CDP_GUY)
    data=${data:130:${#data}}
    mid=$(( ${#data} / 2 ))
    cdps=${data::$mid}; ilks=${data:(-$mid)}
    for i in `seq 64 64 $(( ${#cdps} - 64 ))`; do
      id=$(( 16#${cdps:$i:64} ))
      echo "cdp $id"
      echo "urn ${CDP_MANAGER?}$(printf "%24s" "${id#0x}" | tr ' ' 0)"
      echo "ilk $(mcd --to-ascii ${ilks:$i:64})"
      echo
    done
  };;
  +([[:digit:]]) ) {
    mcd --cdp=$1 cdp "${@:2}"
  };;
  *) {
    mcd cdp-send "$@"
  };;
esac

