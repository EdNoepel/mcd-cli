#!/usr/bin/env bash
if [[ $MCD_CHAIN == "mainnet" ]]; then
  echo "Warning: testnet only. Do not test with real balances"
  exit 1
fi

export SETH_ASYNC=yes
export ETH_GAS=700000

p() { [ $1 = "false" ] && echo "FAIL" && exit; }

numericCompare() {
  p $(awk -v n1="${1}" -v n2="${2}" \
    'BEGIN { print (n1 == n2) ? "true" : "false" }' 2>/dev/null)
}

assertBalanceChanged() {
  diff=$(echo "$1 - $2" | bc)
  numericCompare $diff $3
}

#====================================================================

testJoin() {
  echo "Test: $MCD_ILK join $1"
  lt=$(mcd gem balance vat)
  mcd gem join $1
  gt=$(mcd gem balance vat)
  assertBalanceChanged $gt $lt $1
}

testExit() {
  echo "Test: $MCD_ILK exit $1"
  gt=$(mcd gem balance vat)
  mcd gem exit $1
  lt=$(mcd gem balance vat)
  assertBalanceChanged $gt $lt $1
}

testLock() {
  echo "Test: $MCD_ILK lock $1"
  lt=$(mcd gem balance ink)
  mcd frob $1 0
  gt=$(mcd gem balance ink)
  assertBalanceChanged $gt $lt $1
}

testFree() {
  echo "Test: $MCD_ILK free $1"
  lt=$(mcd gem balance vat)
  mcd frob -- -$1 0
  gt=$(mcd gem balance vat)
  assertBalanceChanged $gt $lt $1
}

testDraw() {
  echo "Test: $MCD_ILK draw $1"
  lt=$(mcd dai balance vat)
  mcd frob 0 $1
  gt=$(mcd dai balance vat)
  assertBalanceChanged $gt $lt $1
}

testDaiExit() {
  echo "Test: $MCD_ILK dai exit $1"
  gt=$(mcd dai balance vat)
  mcd dai exit $1
  lt=$(mcd dai balance vat)
  assertBalanceChanged $gt $lt $1
}

testDaiJoin() {
  echo "Test: $MCD_ILK dai join $1"
  lt=$(mcd dai balance vat)
  mcd dai join $1
  gt=$(mcd dai balance vat)
  assertBalanceChanged $gt $lt $1
}

testWipe() {
  echo "Test: $MCD_ILK wipe $1"
  gt=$(mcd dai balance vat)
  mcd frob -- 0 -$1
  lt=$(mcd dai balance vat)
  assertBalanceChanged $gt $lt $1
}

testBite() {
  echo "Test: $MCD_ILK bite"
  dink=10
  dart=$(echo "($dink - 1) * $(mcd ilk spot)" | bc -l)
  mcd wrap $dink
  mcd gem join $dink
  mcd frob $dink $dart
  ink=$(mcd gem balance ink)
  updatePrice $1 # unsafe
  mcd --urn=$ETH_FROM bite
  updatePrice $2 # restore config price
  assertBalanceChanged $ink 0 $ink
  mcd unwrap $dink
}

updatePrice() {
  lad=$(eval echo "\${VAL_$MCD_ILK?}")
  amt=$(seth --to-uint256 $(seth --to-wei "$1" ETH))
  seth send "$lad" "poke(bytes32)" "$amt"
  mcd poke
}

testCdpOpen() {
  echo Test: Cdp open
  cdp=$(mcd cdp open)
  cdp=${cdp#*cdp}
  export MCD_CDP=$(echo $cdp | tr -d '[:space:]')
  [[ $MCD_CDP =~ [[:digit:]]+ ]] || (echo "FAIL" && exit)
  echo $MCD_CDP
}

testCdpGemJoin() {
  lt=$(mcd --cdp $MCD_CDP gem balance vat)
  (set -x; mcd cdp $MCD_CDP gem join $1)
  gt=$(mcd --cdp $MCD_CDP gem balance vat)
  assertBalanceChanged $gt $lt $1
}

testCdpDaiJoin() {
  lt=$(mcd --cdp $MCD_CDP dai balance vat)
  (set -x; mcd cdp $MCD_CDP dai join $1)
  gt=$(mcd --cdp $MCD_CDP dai balance vat)
  assertBalanceChanged $gt $lt $1
}

testCdpDaiExit() {
  gt=$(mcd --cdp $MCD_CDP dai balance vat)
  (set -x; mcd cdp $MCD_CDP dai exit $1)
  lt=$(mcd --cdp $MCD_CDP dai balance vat)
  assertBalanceChanged $gt $lt $1
}

testCdpFrob() {
  lt=$(mcd --cdp $MCD_CDP gem balance ink)
  (set -x; mcd --cdp $MCD_CDP frob -- $1 $2)
  gt=$(mcd --cdp $MCD_CDP gem balance ink)
  assertBalanceChanged $gt $lt $1
}

testCdpGemExit() {
  gt=$(mcd --cdp $MCD_CDP gem balance vat)
  (set -x; mcd cdp $MCD_CDP gem exit $1)
  lt=$(mcd --cdp $MCD_CDP gem balance vat)
  assertBalanceChanged $gt $lt $1
}

export MCD_ILK=ETH-A
mcd wrap 10
testJoin 10
testLock 1
testDraw 4
testDaiExit 4
testDaiJoin 4
testWipe 4
testFree 1
testExit 10
mcd unwrap 10
testBite 50 149

export MCD_ILK=COL1-A
export MCD_URN=$(seth --to-bytes32 $ETH_FROM)
testJoin 10
testLock 1
testDraw 4
testWipe 4
testFree 1
testExit 10
testBite 1 15

export MCD_ILK=COL1-A
testCdpOpen
testCdpGemJoin 10
testCdpFrob 10 1
testCdpDaiExit 1
testCdpDaiJoin 1
testCdpFrob -10 -1
testCdpGemExit 10

export MCD_ILK=COL1-A
export MCD_PROXY=yes
testCdpOpen
testCdpGemJoin 10
testCdpFrob 10 1
testCdpDaiExit 1
testCdpDaiJoin 1
testCdpFrob -10 -1
testCdpGemExit 10
