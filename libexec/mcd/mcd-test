#!/usr/bin/env bash
if [[ $MCD_CHAIN != "testnet" ]]; then
  echo "Warning: testnet only. Do not test with real balances"
  exit 1
fi

export SETH_ASYNC=yes
export ETH_GAS=700000
source lib/test

testJoin() {
  echo "Test: $MCD_ILK join $1"
  lt=$(./bin/mcd gem balance vat)
  ./bin/mcd gem join $1
  gt=$(./bin/mcd gem balance vat)
  assertBalanceChanged $gt $lt $1
}

testExit() {
  echo "Test: $MCD_ILK exit $1"
  gt=$(./bin/mcd gem balance vat)
  ./bin/mcd gem exit $1
  lt=$(./bin/mcd gem balance vat)
  assertBalanceChanged $gt $lt $1
}

testLock() {
  echo "Test: $MCD_ILK lock $1"
  lt=$(./bin/mcd gem balance ink)
  ./bin/mcd frob $1 0
  gt=$(./bin/mcd gem balance ink)
  assertBalanceChanged $gt $lt $1
}

testFree() {
  echo "Test: $MCD_ILK free $1"
  lt=$(./bin/mcd gem balance vat)
  ./bin/mcd frob -- -$1 0
  gt=$(./bin/mcd gem balance vat)
  assertBalanceChanged $gt $lt $1
}

testDraw() {
  echo "Test: $MCD_ILK draw $1"
  lt=$(./bin/mcd dai balance vat)
  ./bin/mcd frob 0 $1
  gt=$(./bin/mcd dai balance vat)
  assertBalanceChanged $gt $lt $1
}

testWipe() {
  echo "Test: $MCD_ILK wipe $1"
  gt=$(./bin/mcd dai balance vat)
  ./bin/mcd frob -- 0 -$1
  lt=$(./bin/mcd dai balance vat)
  assertBalanceChanged $gt $lt $1
}

testBite() {
  echo "Test: $MCD_ILK bite"
  dink=10
  dart=$(echo "($dink - 1) * $(./bin/mcd ilk spot)" | bc -l)
  ./bin/mcd wrap $dink
  ./bin/mcd gem join $dink
  ./bin/mcd frob $dink $dart
  ink=$(./bin/mcd gem balance ink)
  updatePrice $1 # unsafe
  ./bin/mcd --urn=$ETH_FROM bite
  updatePrice $2 # restore config price
  assertBalanceChanged $ink 0 $ink
  ./bin/mcd unwrap $dink
}

updatePrice() {
  lad=$(eval echo "\${VAL_$MCD_ILK?}")
  amt=$(seth --to-uint256 $(seth --to-wei "$1" ETH))
  seth send "$lad" "poke(bytes32)" "$amt"
  ./bin/mcd poke
}

testCdpOpen() {
  echo Test: Cdp open
  cdp=$(./bin/mcd cdp open)
  cdp=${cdp#*cdp}
  export MCD_CDP=$(echo $cdp | tr -d '[:space:]')
  [[ $MCD_CDP =~ [[:digit:]]+ ]] || (echo "FAIL" && exit)
  echo $MCD_CDP
}

testCdpJoin() {
  echo Test: Cdp join
  lt=$(./bin/mcd gem balance vat)
  ./bin/mcd gem join $1
  gt=$(./bin/mcd gem balance vat)
  assertBalanceChanged $gt $lt $1
}

testCdpFrob() {
  echo "Test: cdp frob"
  lt=$(./bin/mcd gem balance ink)
  ./bin/mcd cdp frob $1 $2
  gt=$(./bin/mcd gem balance ink)
  assertBalanceChanged $gt $lt $1
}

testCdpExit() {
  echo "Test: cdp exit"
  gt=$(./bin/mcd gem balance vat)
  ./bin/mcd --cdp=$MCD_CDP cdp exit $1
  lt=$(./bin/mcd gem balance vat)
  assertBalanceChanged $gt $lt $1
}

# export MCD_ILK=ETH
# ./bin/mcd wrap 10
# testJoin 10
# testLock 1
# testDraw 4
# testWipe 4
# testFree 1
# testExit 10
# ./bin/mcd unwrap 10
# testBite 50 149

# export MCD_ILK=REP
# urn=MCD_URN=$(seth --to-bytes32 $ETH_FROM)
# testJoin 10
# testLock 1
# testDraw 4
# testWipe 4
# testFree 1
# testExit 10
# testBite 1 15

export MCD_ILK=REP
testCdpOpen
testCdpJoin 10
testCdpFrob 1 0
testCdpExit 9
